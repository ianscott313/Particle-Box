//
//  DocumentSearchViewController.swift
//  Particle-Box
//
//  Created by Ian on 4/4/18.
//  Copyright (c) 2018 jumplabs. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import SwiftSpinner

protocol DocumentSearchViewControllerInput
{
    func presentNewDocuments(documents: [BoxDocument])
    func presentAlert(_ alert: UIAlertController)
    func deleteDocument(document: BoxDocument)
}

protocol DocumentSearchViewControllerOutput
{
    func getDocuments(filter: BoxDocumentSearchFilter)
    func getDocument(key: String, filter: BoxDocumentSearchFilter)
    func deleteDocument(document: BoxDocument)
}

class DocumentSearchViewController: UIViewController, DocumentSearchViewControllerInput, UITableViewDelegate, UITableViewDataSource, UISearchBarDelegate
{
    
    var output: DocumentSearchViewControllerOutput!
    var router: DocumentSearchRouter!
    
    var documents = [BoxDocument]()
    var filteredDocuments = [BoxDocument]()
    var searchFilter = BoxDocumentSearchFilter()
    private let refreshControl = UIRefreshControl()

    
    // MARK: Interface builder elements
    
    @IBOutlet weak var searchBar: UISearchBar!
    @IBOutlet weak var tableView: UITableView!
    
    static func storyboardInstance() -> DocumentSearchViewController? {
        let storyboard = UIStoryboard(name: String(describing: self),
                                      bundle: nil)
        return storyboard.instantiateInitialViewController() as? DocumentSearchViewController
    }
    
    
    // MARK: Object lifecycle
    
    override func awakeFromNib()
    {
        super.awakeFromNib()
        DocumentSearchConfigurator.sharedInstance.configure(viewController: self)
    }
    
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        self.title = "Documents"
        
        if #available(iOS 10.0, *) {
            tableView.refreshControl = refreshControl
        } else {
            tableView.addSubview(refreshControl)
        }
        refreshControl.addTarget(self, action: #selector(performSearch), for: .valueChanged)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(true)
        self.performSearch()
    }
    
    // MARK: tableView datasource
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.filteredDocuments.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "Cell")
        let doc = filteredDocuments[indexPath.row]
        cell?.textLabel?.text = doc.key
        cell?.detailTextLabel?.text = doc.value
        return cell!
    }

    
    // MARK: tableView delegate
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        let doc = filteredDocuments[indexPath.row]
        router.showDocumentView(document: doc)
    }
    
    func tableView(_ tableView: UITableView, canEditRowAt indexPath: IndexPath) -> Bool {
        return true
    }
    
    func tableView(_ tableView: UITableView, commit editingStyle: UITableViewCellEditingStyle, forRowAt indexPath: IndexPath) {
        if (editingStyle == UITableViewCellEditingStyle.delete) {
            SwiftSpinner.show("Deleting document...")
            let docToDelete = self.filteredDocuments[indexPath.row]
            self.output.deleteDocument(document: docToDelete)
        }
    }
    
    
    // MARK: searchBar delegate

    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        if !(searchBar.text?.isEmpty)! {
            self.performSearch()
        }
    }
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        // filter the already downloaded documents for matching key before sending request
        if searchText.isEmpty {
            filteredDocuments = documents
        } else {
            filteredDocuments = documents.filter { $0.key.lowercased().contains(searchText.lowercased()) }
        }
        DispatchQueue.main.async {
            self.tableView.reloadData()
        }
    }
    

    // MARK: Event handling
    
    @IBAction func filterPressed(_ sender: Any) {
        router.showSearchFilter()
    }
    
    @IBAction func createPressed(_ sender: Any) {
        router.showCreateDocument()
    }
    
    @objc func performSearch() {
        if (searchBar.text?.isEmpty)! {
            output.getDocuments(filter: searchFilter)
        } else {
            output.getDocument(key: searchBar.text!, filter: searchFilter)
        }
        if !self.refreshControl.isRefreshing {
            SwiftSpinner.show("Retrieving documents...")
        }
    }
    
    
    // MARK: View updates
    
    func presentNewDocuments(documents: [BoxDocument]) {
        SwiftSpinner.hide()
        self.documents = documents
        self.filteredDocuments = documents
        DispatchQueue.main.async {
            self.tableView.reloadData()
            self.refreshControl.endRefreshing()
        }
    }
    
    func presentAlert(_ alert: UIAlertController) {
        SwiftSpinner.hide()
        self.present(alert, animated: true, completion: nil)
    }
    
    func deleteDocument(document: BoxDocument) {
        let index = self.documents.index(of: document)
        self.documents.remove(at: index!)
        let filteredIndex = self.filteredDocuments.index(of: document)
        self.filteredDocuments.remove(at: filteredIndex!)
        DispatchQueue.main.async {
            self.tableView.beginUpdates()
            let indexPath = IndexPath(row: filteredIndex!, section: 0)
            self.tableView.deleteRows(at: [indexPath], with: .automatic)
            self.tableView.endUpdates()
        }
        SwiftSpinner.hide()

    }


}
