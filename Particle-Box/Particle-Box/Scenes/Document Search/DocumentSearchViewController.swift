//
//  DocumentSearchViewController.swift
//  Particle-Box
//
//  Created by Ian on 4/4/18.
//  Copyright (c) 2018 jumplabs. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol DocumentSearchViewControllerInput
{
    func presentNewDocuments(documents: [BoxDocument])
}

protocol DocumentSearchViewControllerOutput
{
    func getDocuments(scope: BoxDocumentScope, deviceId: String?, productId: Int?, filter: String?, page: Int?, perPage: Int?)
}

class DocumentSearchViewController: UIViewController, DocumentSearchViewControllerInput, UITableViewDelegate, UITableViewDataSource
{
    
    var output: DocumentSearchViewControllerOutput!
    var router: DocumentSearchRouter!
    
    var documents = [BoxDocument]()
    var selectedScope = BoxDocumentScope.device
    
    // MARK: Interface builder elements
    
    @IBOutlet weak var searchBar: UISearchBar!
    @IBOutlet weak var scopeSegmentedControl: UISegmentedControl!
    @IBOutlet weak var tableView: UITableView!
    
    static func storyboardInstance() -> DocumentSearchViewController? {
        let storyboard = UIStoryboard(name: String(describing: self),
                                      bundle: nil)
        return storyboard.instantiateInitialViewController() as? DocumentSearchViewController
    }
    
    
    // MARK: Object lifecycle
    
    override func awakeFromNib()
    {
        super.awakeFromNib()
        DocumentSearchConfigurator.sharedInstance.configure(viewController: self)
    }
    
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        self.title = "Documents"
        output.getDocuments(scope: .device, deviceId: nil, productId: nil, filter: nil, page: nil, perPage: nil)
    }
    
    // MARK: tableView datasource
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.documents.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "Cell")
        let doc = documents[indexPath.row]
        cell?.textLabel?.text = doc.key
        cell?.detailTextLabel?.text = doc.value
        return cell!
    }
    
    // MARK: tableView delegate


    // MARK: Event handling
    
    func presentNewDocuments(documents: [BoxDocument]) {
        self.documents = documents
        DispatchQueue.main.async {
            self.tableView.reloadData()
        }

    }

}
