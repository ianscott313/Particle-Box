//
//  DocumentSearchFilterViewController.swift
//  Particle-Box
//
//  Created by Ian on 4/8/18.
//  Copyright (c) 2018 jumplabs. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol DocumentSearchFilterViewControllerInput
{
    func presentPerPageSelection(_ index: Int)
    func presentScopeSelection(_ index: Int)
}

protocol DocumentSearchFilterViewControllerOutput
{
    func setPerPage(perPage: Int)
    func setScope(scope: BoxDocumentScope)
}

class DocumentSearchFilterViewController: UIViewController, DocumentSearchFilterViewControllerInput, UITableViewDataSource, UITableViewDelegate, UITextFieldDelegate
{
    var output: DocumentSearchFilterViewControllerOutput!
    var router: DocumentSearchFilterRouter!
    
    var currentFilter = BoxDocumentSearchFilter()
    var newFilter = BoxDocumentSearchFilter()

    let kDeviceId = 0
    let kProductId = 1
    let kFilter = 2
    let kPage = 3
    let rows = 4
    
    
    // MARK: Interface builder elements
    
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var perPageSegmentedControl: UISegmentedControl!
    @IBOutlet weak var scopeSegmentedControl: UISegmentedControl!
    
    static func storyboardInstance() -> DocumentSearchFilterViewController? {
        let storyboard = UIStoryboard(name: String(describing: self),
                                      bundle: nil)
        return storyboard.instantiateInitialViewController() as? DocumentSearchFilterViewController
    }
    
    
    // MARK: Object lifecycle
    
    override func awakeFromNib()
    {
        super.awakeFromNib()
        DocumentSearchFilterConfigurator.sharedInstance.configure(viewController: self)
    }
    
    
    // MARK: View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        self.title = "Filter"
        tableView.tableFooterView = UIView() //Get rid of empty bottom cells
        newFilter = currentFilter.copy() as! BoxDocumentSearchFilter
        self.setupPerPageSegmentedControl()
        self.setupScopeSegmentedControl()
    }
    
    
    // MARK: View Setup
    
    func setupPerPageSegmentedControl() {
        output.setPerPage(perPage: newFilter.perPage!)
    }
    
    func setupScopeSegmentedControl() {
        output.setScope(scope: newFilter.scope)
    }
    
    
    // MARK: tableView datasource
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return rows
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "Cell") as? SearchFilterTableViewCell
        cell?.textField.addTarget(self, action: #selector(DocumentSearchFilterViewController.textFieldDidChange(_:)), for: .editingChanged)
        switch indexPath.row {
        case kDeviceId:
            cell?.textLabel?.text = "Device id"
            cell?.textField.text = newFilter.deviceId
            cell?.textField.placeholder = "Filter by device id..."
            cell?.textField.tag = kDeviceId
            cell?.textField.keyboardType = .numberPad
        case kProductId:
            cell?.textLabel?.text = "Product id"
            cell?.textField.text = newFilter.productId == nil ? "" : String(describing: newFilter.productId!)
            cell?.textField.placeholder = "Filter by product id..."
            cell?.textField.tag = kProductId
            cell?.textField.keyboardType = .numberPad
        case kFilter:
            cell?.textLabel?.text = "Filter"
            cell?.textField.text = newFilter.filter
            cell?.textField.placeholder = "Filter by key..."
            cell?.textField.tag = kFilter
            cell?.textField.keyboardType = .asciiCapable
        case kPage:
            cell?.textLabel?.text = "Page"
            cell?.textField.text = newFilter.page == nil ? "" : String(describing: newFilter.page!)
            cell?.textField.placeholder = "Filter by page of results..."
            cell?.textField.tag = kPage
            cell?.textField.keyboardType = .numberPad
        default:
            print("unrecognized index in cellForRow")
        }

        return cell!
    }
    
    
    // MARK: tableView delegate
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        tableView.deselectRow(at: indexPath, animated: true)
        let cell = tableView.cellForRow(at: indexPath) as? SearchFilterTableViewCell
        cell?.textField.becomeFirstResponder()
    }
    
    
    // MARK: textField target
    
    @objc func textFieldDidChange(_ textField: UITextField) {
        switch textField.tag {
        case kDeviceId:
            self.newFilter.deviceId = (textField.text?.isEmpty)! ? nil : textField.text!
            break
        case kProductId:
            self.newFilter.productId = (textField.text?.isEmpty)! ? nil : Int(textField.text!)
            break
        case kFilter:
            self.newFilter.filter = (textField.text?.isEmpty)! ? nil : textField.text!
            break
        case kPage:
            self.newFilter.page = (textField.text?.isEmpty)! ? nil : Int(textField.text!)
            break
        default:
            break
        }
    }
    
    
    // MARK: Event handling

    @IBAction func applyPressed(_ sender: Any) {
        currentFilter.deviceId = newFilter.deviceId
        currentFilter.productId = newFilter.productId
        currentFilter.filter = newFilter.filter
        currentFilter.page = newFilter.page
        currentFilter.perPage = newFilter.perPage
        currentFilter.scope = newFilter.scope
        router.dismiss()
    }
    
    @IBAction func clearPressed(_ sender: Any) {
        let resetFilter = BoxDocumentSearchFilter()
        currentFilter.deviceId = resetFilter.deviceId
        currentFilter.productId = resetFilter.productId
        currentFilter.filter = resetFilter.filter
        currentFilter.page = resetFilter.page
        currentFilter.perPage = resetFilter.perPage
        currentFilter.scope = resetFilter.scope
        router.dismiss()
    }
    
    @IBAction func perPageSegmentedControlChanged(_ sender: Any) {
        if let segmentedControl = sender as? UISegmentedControl {
            switch segmentedControl.selectedSegmentIndex {
            case 0:
                newFilter.perPage = 10
            case 1:
                newFilter.perPage = 25
            case 2:
                newFilter.perPage = 50
            case 3:
                newFilter.perPage = 100
            default:
                print("unrecognized per page selected")
            }
        }
    }
    
    @IBAction func ScopeSegmentedControlChanged(_ sender: Any) {
        if let segmentedControl = sender as? UISegmentedControl {
            switch segmentedControl.selectedSegmentIndex {
            case 0:
                newFilter.scope = .none
                break
            case 1:
                newFilter.scope = .device
                break
            case 2:
                newFilter.scope = .user
                break
            case 3:
                newFilter.scope = .product
                break
            default:
                print("unrecognized scope selected")
                break
            }
        }
    }
    
    
    // MARK: View updates

    func presentPerPageSelection(_ index: Int) {
        self.perPageSegmentedControl.selectedSegmentIndex = index
    }
    
    func presentScopeSelection(_ index: Int) {
        self.scopeSegmentedControl.selectedSegmentIndex = index
    }

    
}
